{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Baseline_models","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"qMioAKQQ76ep","executionInfo":{"status":"ok","timestamp":1639543015047,"user_tz":360,"elapsed":278,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}}},"source":["from google.colab import drive\n","import os\n","import random\n","import numpy as np\n","import pandas as pd\n","from sklearn import metrics \n","from matplotlib import pyplot\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.neural_network import MLPClassifier"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RzoahfDB8Hwr","executionInfo":{"status":"ok","timestamp":1639543016830,"user_tz":360,"elapsed":1655,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"822631f2-ed8a-46a8-b8d5-65c07ece238d"},"source":["drive.mount('/content/drive', force_remount=True)\n","os.chdir('/content/drive/My Drive/Courses/CS545_MLSP/CS545_MLSP_Project/Code/')"],"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","metadata":{"id":"l0JKvraqJ19X"},"source":["# Random Forest Classifier and Multi Layer Perceptron"]},{"cell_type":"markdown","metadata":{"id":"wXGgA-rwLK3h"},"source":["## MFCC\n"]},{"cell_type":"code","metadata":{"id":"sPfnDzUSU4D9","executionInfo":{"status":"ok","timestamp":1639543016830,"user_tz":360,"elapsed":3,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}}},"source":["from scipy.optimize import brentq\n","from scipy.interpolate import interp1d\n","from sklearn.metrics import roc_auc_score\n","\n","models = ['RandomForest-MFCC','MLP-MFCC','RandomForest-LFCC','MLP-LFCC']\n","\n","def calculate_eer(y_true, y_score):\n","    '''\n","    Returns the equal error rate for a binary classifier output.\n","    '''\n","    fpr, tpr, thresholds = metrics.roc_curve(y_true, y_score, pos_label=1)\n","    eer = brentq(lambda x : 1. - x - interp1d(fpr, tpr)(x), 0., 1.)\n","\n","    return fpr, tpr, eer\n","\n"],"execution_count":19,"outputs":[]},{"cell_type":"code","metadata":{"id":"i2rIi3OQ3zLv","executionInfo":{"status":"ok","timestamp":1639543016831,"user_tz":360,"elapsed":3,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}}},"source":["def predict(clf, X_test, Y_test, show_eer_roc = True):\n","  predictions = clf.predict(X_test)\n","\n","  accuracy = np.sum(Y_test == predictions)/(X_test.shape[0])\n","  print(\"Accuracy: \",accuracy*100)\n","\n","  if(show_eer_roc):\n","    fpr, tpr = [], []\n","    fpr_rf, tpr_rf, err = calculate_eer(Y_test,clf.predict_proba(X_test)[:, 1])\n","    print(\"EER:\",err )\n","    \n","    fpr.append(fpr_rf)\n","    tpr.append(tpr_rf)\n","\n","    print(\"ROC_AUC:\", metrics.roc_auc_score(Y_test, clf.predict_proba(X_test)[:, 1]))"],"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":["### Loading Training Data"],"metadata":{"id":"D2FgIhXisJqV"}},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Rfv2W6h98Jxj","executionInfo":{"status":"ok","timestamp":1639543019125,"user_tz":360,"elapsed":881,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"7710d37a-e5bd-4bef-9b62-c6313fddc095"},"source":["sampleCount_train = 20000\n","sampleCount_test = 2000\n","\n","random.seed(0)\n","\n","print(\"------------Training Data MFCC-------------\")\n","\n","X_mfcc = np.load('./features/for/training/' + 'fake/mfcc.npy')\n","X_fake_mfcc = X_mfcc[np.random.choice(X_mfcc.shape[0], sampleCount_train, replace=False)]\n","print(\"MFCC fake train: \",X_fake_mfcc.shape)\n","\n","X_mfcc = np.load('./features/for/training/' + 'real/mfcc.npy')\n","X_real_mfcc = X_mfcc[np.random.choice(X_mfcc.shape[0], sampleCount_train, replace=False)]\n","print(\"MFCC real train: \",X_real_mfcc.shape)\n","\n","del X_mfcc\n","\n","X_train = np.concatenate((X_fake_mfcc,X_real_mfcc))\n","\n","X_train = X_train.reshape(2*sampleCount_train,-1)\n","print(X_train.shape)\n","\n","Y_train = np.concatenate((np.zeros(sampleCount_train),np.ones(sampleCount_train)))\n","print(Y_train.shape)"],"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["------------Training Data MFCC-------------\n","MFCC fake train:  (20000, 20, 44)\n","MFCC real train:  (20000, 20, 44)\n","(40000, 880)\n","(40000,)\n"]}]},{"cell_type":"markdown","source":["#### Random Forest Classifier"],"metadata":{"id":"5DS45NNQrDoB"}},{"cell_type":"code","source":["rf_clf = RandomForestClassifier(random_state=0)\n","rf_clf.fit(X_train, Y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UbBLrljrkTCF","executionInfo":{"status":"ok","timestamp":1639543198309,"user_tz":360,"elapsed":177901,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"b220cbf3-b813-4567-bcc0-13cc5ea0804a"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(random_state=0)"]},"metadata":{},"execution_count":22}]},{"cell_type":"markdown","source":["#### MLP Classifier"],"metadata":{"id":"r_Q-tq5yrOV9"}},{"cell_type":"code","source":["mlp_clf = MLPClassifier(solver='adam', alpha=1e-5,hidden_layer_sizes=(5, 2), random_state=1,max_iter = 500)\n","mlp_clf.fit(X_train, Y_train)"],"metadata":{"id":"Qp6afVQGrQPB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639543205526,"user_tz":360,"elapsed":7222,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"ce8361e5-0985-43aa-b941-d77033237f11"},"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["MLPClassifier(alpha=1e-05, hidden_layer_sizes=(5, 2), max_iter=500,\n","              random_state=1)"]},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","source":["### Testing data"],"metadata":{"id":"oseRKerijypt"}},{"cell_type":"code","source":["def run_test_for_models(features_path, input_data_type):\n","  test_X_mfcc = np.load(features_path)\n","  print(input_data_type +  \" fake test: \",test_X_mfcc.shape)\n","\n","  X_test = test_X_mfcc.reshape(test_X_mfcc.shape[0],-1)\n","  print(X_test.shape)\n","\n","  Y_test = np.zeros(test_X_mfcc.shape[0])\n","  print(Y_test.shape)\n","\n","  print('\\nRandom Forest:')\n","  predict(rf_clf, X_test, Y_test, show_eer_roc = False)\n","\n","  print('\\nMLP:')\n","  predict(mlp_clf, X_test, Y_test, show_eer_roc = False)"],"metadata":{"id":"yaMkEY3xGudQ","executionInfo":{"status":"ok","timestamp":1639543234947,"user_tz":360,"elapsed":144,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["print(\"------------FoR:  Testing Data MFCC-------------\")\n","\n","test_X_mfcc = np.load('./features/for/testing/' + 'fake/mfcc.npy')\n","X_fake_mfcc_test = test_X_mfcc[np.random.choice(test_X_mfcc.shape[0], sampleCount_test, replace=False)]\n","print(\"MFCC fake test: \",X_fake_mfcc_test.shape)\n","\n","test_X_mfcc = np.load('./features/for/testing/' + 'real/mfcc.npy')\n","X_real_mfcc_test = test_X_mfcc[np.random.choice(test_X_mfcc.shape[0], sampleCount_test, replace=False)]\n","print(\"MFCC real test \",X_real_mfcc_test.shape)\n","\n","del test_X_mfcc\n","\n","X_test = np.concatenate((X_fake_mfcc_test,X_real_mfcc_test))\n","\n","X_test = X_test.reshape(X_test.shape[0],-1)\n","print(X_test.shape)\n","\n","Y_test = np.concatenate((np.zeros(sampleCount_test),np.ones(sampleCount_test)))\n","print(Y_test.shape)\n","\n","print('\\nRandom Forest:\\n')\n","predict(rf_clf, X_test, Y_test)\n","\n","print('\\nMLP:\\n')\n","predict(mlp_clf, X_test, Y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s5CHqmLuj1wo","executionInfo":{"status":"ok","timestamp":1639543237922,"user_tz":360,"elapsed":1203,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"298dabea-38b6-4619-92c8-891b0d10f8f1"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["------------FoR:  Testing Data MFCC-------------\n","MFCC fake test:  (2000, 20, 44)\n","MFCC real test  (2000, 20, 44)\n","(4000, 880)\n","(4000,)\n","\n","Random Forest:\n","\n","Accuracy:  68.975\n","EER: 0.30272839506172844\n","ROC_AUC: 0.793942\n","\n","MLP:\n","\n","Accuracy:  50.0\n","EER: 0.5\n","ROC_AUC: 0.5\n"]}]},{"cell_type":"code","source":["print(\"------------LA:  Testing Data MFCC-------------\")\n","\n","test_X_mfcc = np.load('./data/test/fake/features_fake/LA_Fake/mfcc.npy')\n","X_fake_mfcc_test = test_X_mfcc\n","print(\"MFCC fake test: \",X_fake_mfcc_test.shape)\n","\n","test_X_mfcc = np.load('./data/test/real/features_real/la/mfcc.npy')\n","X_real_mfcc_test = test_X_mfcc\n","print(\"MFCC real test \",X_real_mfcc_test.shape)\n","\n","del test_X_mfcc\n","\n","X_test = np.concatenate((X_fake_mfcc_test,X_real_mfcc_test))\n","\n","X_test = X_test.reshape(X_test.shape[0],-1)\n","print(X_test.shape)\n","\n","Y_test = np.concatenate((np.zeros(X_fake_mfcc_test.shape[0]),np.ones(X_real_mfcc_test.shape[0])))\n","print(Y_test.shape)\n","\n","print('\\nRandom Forest:')\n","predict(rf_clf, X_test, Y_test)\n","\n","print('\\nMLP:')\n","predict(mlp_clf, X_test, Y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c3sHs24hpZnT","executionInfo":{"status":"ok","timestamp":1639543269472,"user_tz":360,"elapsed":271,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"7abcc4a1-bb4a-4a40-b627-4b2e246ba6db"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["------------LA:  Testing Data MFCC-------------\n","MFCC fake test:  (64, 20, 44)\n","MFCC real test  (56, 20, 44)\n","(120, 880)\n","(120,)\n","\n","Random Forest:\n","Accuracy:  46.666666666666664\n","EER: 0.4456521739130435\n","ROC_AUC: 0.5492466517857143\n","\n","MLP:\n","Accuracy:  46.666666666666664\n","EER: 0.5\n","ROC_AUC: 0.5\n"]}]},{"cell_type":"code","source":["print(\"------------Testing Data: FastSpeech-------------\")\n","run_test_for_models('./data/test/fake/features_fake/FastSpeech/mfcc.npy', 'MFCC')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"58STiynLlJMN","executionInfo":{"status":"ok","timestamp":1639543307761,"user_tz":360,"elapsed":437,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"8d6c5eef-ffa0-4743-d1eb-512e42ab83eb"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["------------Testing Data: FastSpeech-------------\n","MFCC fake test:  (65, 20, 44)\n","(65, 880)\n","(65,)\n","\n","Random Forest:\n","Accuracy:  46.15384615384615\n","\n","MLP:\n","Accuracy:  0.0\n"]}]},{"cell_type":"code","source":["print(\"------------Testing Data: WaveRNN-------------\")\n","run_test_for_models('./data/test/fake/features_fake/WaveRNN/mfcc.npy', 'MFCC')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EpEXXwJKmYum","executionInfo":{"status":"ok","timestamp":1639543311713,"user_tz":360,"elapsed":466,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"681838a2-d81a-4a03-c47e-debfb225a414"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["------------Testing Data: WaveRNN-------------\n","MFCC fake test:  (71, 20, 44)\n","(71, 880)\n","(71,)\n","\n","Random Forest:\n","Accuracy:  5.633802816901409\n","\n","MLP:\n","Accuracy:  0.0\n"]}]},{"cell_type":"code","source":["print(\"------------Testing Data: WaveNet-------------\")\n","run_test_for_models('./data/test/fake/features_fake/WaveNet/mfcc.npy', 'MFCC')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Cnxos9BEmeud","executionInfo":{"status":"ok","timestamp":1639543314847,"user_tz":360,"elapsed":278,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"c88ec423-f0db-44ea-9d3b-57943a7fb035"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["------------Testing Data: WaveNet-------------\n","MFCC fake test:  (62, 20, 44)\n","(62, 880)\n","(62,)\n","\n","Random Forest:\n","Accuracy:  25.806451612903224\n","\n","MLP:\n","Accuracy:  0.0\n"]}]},{"cell_type":"code","source":["print(\"------------Testing Data: Tacotron&Waveglow-------------\")\n","run_test_for_models('./data/test/fake/features_fake/Tacotron&Waveglow/mfcc.npy', 'MFCC')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cFeqlG_dmhMA","executionInfo":{"status":"ok","timestamp":1639543317378,"user_tz":360,"elapsed":437,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"dcb4e9b7-9880-445c-8b76-cfd6a7dbdf13"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["------------Testing Data: Tacotron&Waveglow-------------\n","MFCC fake test:  (55, 20, 44)\n","(55, 880)\n","(55,)\n","\n","Random Forest:\n","Accuracy:  7.2727272727272725\n","\n","MLP:\n","Accuracy:  0.0\n"]}]},{"cell_type":"code","source":[""],"metadata":{"id":"uIGSobTemK9W"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8-xuwzlULO0Z"},"source":["## LFCC"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vePqRIpsBVU0","executionInfo":{"status":"ok","timestamp":1639543354966,"user_tz":360,"elapsed":31024,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"664af46f-71cc-4523-9404-5e5284abb26e"},"source":["print(\"------------Training Data LFCC-------------\")\n","\n","X_lfcc = np.load('./features/for/training/' + 'fake/lfcc.npy')\n","X_fake_lfcc = X_lfcc[np.random.choice(X_lfcc.shape[0], sampleCount_train, replace=False)]\n","print(\"LFCC fake train: \",X_fake_lfcc.shape)\n","\n","X_lfcc = np.load('./features/for/training/' + 'real/lfcc.npy')\n","X_real_lfcc = X_lfcc[np.random.choice(X_lfcc.shape[0], sampleCount_train, replace=False)]\n","print(\"LFCC real train: \",X_real_lfcc.shape)\n","\n","del X_lfcc\n","\n","X_train = np.concatenate((X_fake_lfcc,X_real_lfcc))\n","\n","X_train = X_train.reshape(2*sampleCount_train,-1)\n","print(X_train.shape)\n","\n","Y_train = np.concatenate((np.zeros(sampleCount_train),np.ones(sampleCount_train)))\n","print(Y_train.shape)\n","\n","# Each row represents one sample => each sample has 1768 features\n","\n","print(\"------------Testing Data LFCC-------------\")\n","\n","test_X_lfcc = np.load('./features/for/testing/' + 'fake/lfcc.npy')\n","X_fake_lfcc_test = test_X_lfcc[np.random.choice(test_X_lfcc.shape[0], sampleCount_test, replace=False)]\n","print(\"LFCC fake test: \",X_fake_lfcc_test.shape)\n","\n","test_X_lfcc = np.load('./features/for/testing/' + 'real/lfcc.npy')\n","X_real_lfcc_test = test_X_lfcc[np.random.choice(test_X_lfcc.shape[0], sampleCount_test, replace=False)]\n","print(\"LFCC real test: \",X_real_lfcc_test.shape)\n","\n","del test_X_lfcc\n","\n","X_test = np.concatenate((X_fake_lfcc_test,X_real_lfcc_test))\n","\n","X_test = X_test.reshape(2*sampleCount_test,-1)\n","print(X_test.shape)\n","\n","Y_test = np.concatenate((np.zeros(sampleCount_test),np.ones(sampleCount_test)))\n","print(Y_test.shape)\n"],"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["------------Training Data LFCC-------------\n","LFCC fake train:  (20000, 136, 13)\n","LFCC real train:  (20000, 136, 13)\n","(40000, 1768)\n","(40000,)\n","------------Testing Data LFCC-------------\n","LFCC fake test:  (2000, 136, 13)\n","LFCC real test:  (2000, 136, 13)\n","(4000, 1768)\n","(4000,)\n"]}]},{"cell_type":"markdown","source":["#### Random Forest Classifier"],"metadata":{"id":"99Ag8kGjKGDe"}},{"cell_type":"code","source":["rf_clf = RandomForestClassifier(random_state=0)\n","rf_clf.fit(X_train, Y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639543665335,"user_tz":360,"elapsed":292602,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"31436aa2-4dd1-44c3-c6ec-cdbb3a7d7bd7","id":"kmLKDLNgKGDg"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(random_state=0)"]},"metadata":{},"execution_count":34}]},{"cell_type":"markdown","source":["#### MLP Classifier"],"metadata":{"id":"b8gI0bEWKGDh"}},{"cell_type":"code","source":["mlp_clf = MLPClassifier(solver='adam', alpha=1e-5,hidden_layer_sizes=(5, 2), random_state=1,max_iter = 500)\n","mlp_clf.fit(X_train, Y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639543952528,"user_tz":360,"elapsed":287196,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"004cd3c5-5710-494c-c4e0-382726ae6e77","id":"16xuA2TlKGDi"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["MLPClassifier(alpha=1e-05, hidden_layer_sizes=(5, 2), max_iter=500,\n","              random_state=1)"]},"metadata":{},"execution_count":35}]},{"cell_type":"markdown","source":["### Testing data"],"metadata":{"id":"tMbg_bomKGDj"}},{"cell_type":"code","source":["def run_test_for_models(features_path, input_data_type):\n","  test_X_mfcc = np.load(features_path)\n","  print(input_data_type +  \" fake test: \",test_X_mfcc.shape)\n","\n","  X_test = test_X_mfcc.reshape(test_X_mfcc.shape[0],-1)\n","  print(X_test.shape)\n","\n","  Y_test = np.zeros(test_X_mfcc.shape[0])\n","  print(Y_test.shape)\n","\n","  print('\\nRandom Forest:')\n","  predict(rf_clf, X_test, Y_test, show_eer_roc = False)\n","\n","  print('\\nMLP:')\n","  predict(mlp_clf, X_test, Y_test, show_eer_roc = False)"],"metadata":{"executionInfo":{"status":"ok","timestamp":1639543971002,"user_tz":360,"elapsed":110,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"id":"49OkPFeSKGDj"},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["print(\"------------FoR:  Testing Data LFCC-------------\")\n","\n","test_X_mfcc = np.load('./features/for/testing/' + 'fake/lfcc.npy')\n","X_fake_mfcc_test = test_X_mfcc[np.random.choice(test_X_mfcc.shape[0], sampleCount_test, replace=False)]\n","print(\"LFCC fake test: \",X_fake_mfcc_test.shape)\n","\n","test_X_mfcc = np.load('./features/for/testing/' + 'real/lfcc.npy')\n","X_real_mfcc_test = test_X_mfcc[np.random.choice(test_X_mfcc.shape[0], sampleCount_test, replace=False)]\n","print(\"LFCC real test \",X_real_mfcc_test.shape)\n","\n","del test_X_mfcc\n","\n","X_test = np.concatenate((X_fake_mfcc_test,X_real_mfcc_test))\n","\n","X_test = X_test.reshape(X_test.shape[0],-1)\n","print(X_test.shape)\n","\n","Y_test = np.concatenate((np.zeros(sampleCount_test),np.ones(sampleCount_test)))\n","print(Y_test.shape)\n","\n","print('\\nRandom Forest:\\n')\n","predict(rf_clf, X_test, Y_test)\n","\n","print('\\nMLP:\\n')\n","predict(mlp_clf, X_test, Y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639543975095,"user_tz":360,"elapsed":1844,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"bf39f878-735b-4451-9cfc-41ebc54b7b21","id":"gtagku8oKGDk"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["------------FoR:  Testing Data LFCC-------------\n","LFCC fake test:  (2000, 136, 13)\n","LFCC real test  (2000, 136, 13)\n","(4000, 1768)\n","(4000,)\n","\n","Random Forest:\n","\n","Accuracy:  60.650000000000006\n","EER: 0.3805434782608696\n","ROC_AUC: 0.6887464999999999\n","\n","MLP:\n","\n","Accuracy:  52.1\n","EER: 0.47764285714285715\n","ROC_AUC: 0.5169535\n"]}]},{"cell_type":"code","source":["print(\"------------LA:  Testing Data LFCC-------------\")\n","\n","test_X_mfcc = np.load('./data/test/fake/features_fake/LA_Fake/lfcc.npy')\n","X_fake_mfcc_test = test_X_mfcc\n","print(\"LFCC fake test: \",X_fake_mfcc_test.shape)\n","\n","test_X_mfcc = np.load('./data/test/real/features_real/la/lfcc.npy')\n","X_real_mfcc_test = test_X_mfcc\n","print(\"LFCC real test \",X_real_mfcc_test.shape)\n","\n","del test_X_mfcc\n","\n","X_test = np.concatenate((X_fake_mfcc_test,X_real_mfcc_test))\n","\n","X_test = X_test.reshape(X_test.shape[0],-1)\n","print(X_test.shape)\n","\n","Y_test = np.concatenate((np.zeros(X_fake_mfcc_test.shape[0]),np.ones(X_real_mfcc_test.shape[0])))\n","print(Y_test.shape)\n","\n","print('\\nRandom Forest:')\n","predict(rf_clf, X_test, Y_test)\n","\n","print('\\nMLP:')\n","predict(mlp_clf, X_test, Y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639543994408,"user_tz":360,"elapsed":820,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"92dc0574-f3fa-482d-ee61-c7f8a0409dce","id":"h2bd1WQJKGDm"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["------------LA:  Testing Data LFCC-------------\n","LFCC fake test:  (64, 136, 13)\n","LFCC real test  (56, 136, 13)\n","(120, 1768)\n","(120,)\n","\n","Random Forest:\n","Accuracy:  50.83333333333333\n","EER: 0.44642857142846654\n","ROC_AUC: 0.6227678571428571\n","\n","MLP:\n","Accuracy:  51.66666666666667\n","EER: 0.5023923444976073\n","ROC_AUC: 0.5157645089285714\n"]}]},{"cell_type":"code","source":["print(\"------------Testing Data: FastSpeech-------------\")\n","run_test_for_models('./data/test/fake/features_fake/FastSpeech/lfcc.npy', 'LFCC')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639544016969,"user_tz":360,"elapsed":516,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"c9d47a2a-08fd-4f69-fce8-5f6552a3092e","id":"QYfdUy1IKGDn"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["------------Testing Data: FastSpeech-------------\n","LFCC fake test:  (65, 136, 13)\n","(65, 1768)\n","(65,)\n","\n","Random Forest:\n","Accuracy:  12.307692307692308\n","\n","MLP:\n","Accuracy:  9.230769230769232\n"]}]},{"cell_type":"code","source":["print(\"------------Testing Data: WaveRNN-------------\")\n","run_test_for_models('./data/test/fake/features_fake/WaveRNN/lfcc.npy', 'LFCC')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639544018324,"user_tz":360,"elapsed":445,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"b2448cdd-596e-4759-caa7-a1e26cb03a6e","id":"aVoelCBqKGDo"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["------------Testing Data: WaveRNN-------------\n","LFCC fake test:  (71, 136, 13)\n","(71, 1768)\n","(71,)\n","\n","Random Forest:\n","Accuracy:  8.450704225352112\n","\n","MLP:\n","Accuracy:  14.084507042253522\n"]}]},{"cell_type":"code","source":["print(\"------------Testing Data: WaveNet-------------\")\n","run_test_for_models('./data/test/fake/features_fake/WaveNet/lfcc.npy', 'LFCC')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"error","timestamp":1639544019187,"user_tz":360,"elapsed":372,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"b44bd56a-c1a0-44cb-9092-a020961ef119","id":"QBIBzgBuKGDp"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["------------Testing Data: WaveNet-------------\n","LFCC fake test:  (62, 136, 13)\n","(62, 1768)\n","(62,)\n","\n","Random Forest:\n"]},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-41-811373815a1c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"------------Testing Data: WaveNet-------------\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mrun_test_for_models\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'./data/test/fake/features_fake/WaveNet/lfcc.npy'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'LFCC'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-36-74b939b966a3>\u001b[0m in \u001b[0;36mrun_test_for_models\u001b[0;34m(features_path, input_data_type)\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\nRandom Forest:'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m   \u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrf_clf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshow_eer_roc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'\\nMLP:'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-20-374b5d61c13b>\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(clf, X_test, Y_test, show_eer_roc)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mclf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mshow_eer_roc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0mpredictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mY_test\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mpredictions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Accuracy: \"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0maccuracy\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    796\u001b[0m             \u001b[0mThe\u001b[0m \u001b[0mpredicted\u001b[0m \u001b[0mclasses\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    797\u001b[0m         \"\"\"\n\u001b[0;32m--> 798\u001b[0;31m         \u001b[0mproba\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    799\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    800\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mn_outputs_\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36mpredict_proba\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    838\u001b[0m         \u001b[0mcheck_is_fitted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    839\u001b[0m         \u001b[0;31m# Check data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 840\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_X_predict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    841\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    842\u001b[0m         \u001b[0;31m# Assign chunk of trees to jobs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_forest.py\u001b[0m in \u001b[0;36m_validate_X_predict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    567\u001b[0m         Validate X whenever one tries to predict, apply, predict_proba.\"\"\"\n\u001b[1;32m    568\u001b[0m         \u001b[0mcheck_is_fitted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 569\u001b[0;31m         \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mDTYPE\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"csr\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    570\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0missparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintc\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindptr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    571\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"No support for np.int64 index based sparse matrices\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    559\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Validation should be done on X, y or both.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    560\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 561\u001b[0;31m             \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    562\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    563\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mno_val_X\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mno_val_y\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator)\u001b[0m\n\u001b[1;32m    790\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    791\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mforce_all_finite\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 792\u001b[0;31m             \u001b[0m_assert_all_finite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_nan\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mforce_all_finite\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"allow-nan\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    793\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    794\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mensure_min_samples\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36m_assert_all_finite\u001b[0;34m(X, allow_nan, msg_dtype)\u001b[0m\n\u001b[1;32m    114\u001b[0m             raise ValueError(\n\u001b[1;32m    115\u001b[0m                 msg_err.format(\n\u001b[0;32m--> 116\u001b[0;31m                     \u001b[0mtype_err\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmsg_dtype\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mmsg_dtype\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    117\u001b[0m                 )\n\u001b[1;32m    118\u001b[0m             )\n","\u001b[0;31mValueError\u001b[0m: Input contains NaN, infinity or a value too large for dtype('float32')."]}]},{"cell_type":"code","source":["print(\"------------Testing Data: Tacotron&Waveglow-------------\")\n","run_test_for_models('./data/test/fake/features_fake/Tacotron&Waveglow/lfcc.npy', 'LFCC')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639544020142,"user_tz":360,"elapsed":274,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}},"outputId":"5b6e0b23-97cf-410a-bcd1-919f161ddd5e","id":"l9AI9Ap2KGDq"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["------------Testing Data: Tacotron&Waveglow-------------\n","LFCC fake test:  (55, 136, 13)\n","(55, 1768)\n","(55,)\n","\n","Random Forest:\n","Accuracy:  20.0\n","\n","MLP:\n","Accuracy:  18.181818181818183\n"]}]},{"cell_type":"code","metadata":{"id":"rCSqObnE85Wn","executionInfo":{"status":"ok","timestamp":1639544021627,"user_tz":360,"elapsed":130,"user":{"displayName":"Nikhitha Reddeddy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03477990533991520713"}}},"source":[""],"execution_count":42,"outputs":[]}]}